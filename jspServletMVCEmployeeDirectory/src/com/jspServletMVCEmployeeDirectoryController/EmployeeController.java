package com.jspServletMVCEmployeeDirectoryController;

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.jspServlet.DAO.EmployeeDAO;
import com.jspServlet.DAO.EmployeeDAOImpl;
import com.jspServlet.entity.Employee;

public class EmployeeController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	RequestDispatcher dispatcher=null; 
	EmployeeDAO employeeDAO=null;  //reference of interface
			
    public EmployeeController() {
        employeeDAO=new EmployeeDAOImpl();  //initialize employeeDAO
    }

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String action=request.getParameter("action");
		
		if(action==null) {
			action="list";
		}
		
		switch(action) {
			case "list":
				listEmployees(request, response);
				break;
				
			case "EDIT":
				getSingleEmployee(request, response);	//it get id using request object
				break;
			
			case "DELETE":
				DeleteEmployee(request, response);	//it get id using request object
				break;
					
				
			default:
				listEmployees(request, response);
				break; 	
		}
			
	}


	

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//it gets id only when we update a record otherwise in case of add it is null
		
		String name=request.getParameter("name");		//taking parameter HTML from form using "name" attribute
		String dob=request.getParameter("dob");
		String department=request.getParameter("department");
		String id=request.getParameter("id");			//id parameter only obtained when we are using edit link	//because in form we have not taken "ID" 
														//id is autogenerated in datbase
		
		Employee e=new Employee();
		e.setName(name);
		e.setDob(dob);
		e.setDepartment(department);
		
		
		if(id.isEmpty() || id==null) {
			if(employeeDAO.save(e)) {    //employeeDAO is object of implementaion class
				request.setAttribute("message","saved successfully!");
			}
		}else {
		
			e.setId(Integer.parseInt(id));			//if we write it outside then app is crash at runtime in case of "Add Employee" because then we dont get "id"
			
			if(employeeDAO.update(e)) {    //employeeDAO is object of implementaion class
				request.setAttribute("message","Updated successfully!");
			}
		}
		
		
		listEmployees(request, response);
	}
	
	
	public void listEmployees(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
				//call get() methode to get list of employees
				List<Employee>list=employeeDAO.get();     //employeeDAO is object of implementaion class
				
				
				//add employee to request object
				request.setAttribute("list",list);
				
				//forward the request and responce object
			    dispatcher=request.getRequestDispatcher("/views/employee-list.jsp");
				dispatcher.forward(request, response);
	}


	public void getSingleEmployee(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String id=request.getParameter("id");
				
		//for update,1st we have to write corresponding data to form
		//get corresponding record using get() methode
		Employee employee=employeeDAO.get(Integer.parseInt(id));
		
		request.setAttribute("employee",employee);   //we have to use this object in "form"
		//we get employee object in form only when we are calling "employee-add.jsp" from this methode i.e im update
			//& not get this object we are using dopost()
		
		dispatcher=request.getRequestDispatcher("/views/employee-add.jsp"); 
		dispatcher.forward(request, response);
	}


	
	public void DeleteEmployee(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String id=request.getParameter("id");
		
		if(employeeDAO.delete(Integer.parseInt(id))) {
			request.setAttribute("message","record has been deleted!");
		}
		
		listEmployees(request, response);    //if record is not deleted then also display list  
		
	}
	
	
}
 